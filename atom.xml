<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Roliroli's Blog - Creative thinking is useless unless you know how to sell it]]></title>
  <link href="http://kurorido.github.io/atom.xml" rel="self"/>
  <link href="http://kurorido.github.io/"/>
  <updated>2016-04-13T21:53:17+08:00</updated>
  <id>http://kurorido.github.io/</id>
  <author>
    <name><![CDATA[kuroridoplayer@gmail.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Open_jtalk on Ubuntu 14.04]]></title>
    <link href="http://kurorido.github.io/blog/2016/04/13/use-open-jtalk-on-ubuntu-14-dot-04/"/>
    <updated>2016-04-13T20:44:24+08:00</updated>
    <id>http://kurorido.github.io/blog/2016/04/13/use-open-jtalk-on-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<p>Open Jtalk 是一套可以把日文文字用電腦唸出來的軟體工具(Japanese text-to-speech system)</p>

<p><a href="http://open-jtalk.sourceforge.net/" refl="nofollow" target="_blank">官網</a>上並沒有文件說明要如何安裝，所以只得自己研究</p>

<!-- more -->


<p>在 Ubuntu 下最容易的安裝方法是透過 apt-get</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-add-repository ppa:openhri/ppa
</span><span class='line'>sudo aptitude update
</span><span class='line'>sudo aptitude install open-jtalk</span></code></pre></td></tr></table></div></figure>


<p>安裝完後就可以直接使用 open_jtalk 指令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ open_jtalk
</span><span class='line'>The Japanese TTS System "Open JTalk"
</span><span class='line'>Version 1.07 (http://open-jtalk.sourceforge.net/)
</span><span class='line'>Copyright (C) 2008-2013 Nagoya Institute of Technology
</span><span class='line'>All rights reserved.</span></code></pre></td></tr></table></div></figure>


<p>要使用 open_jtalk 還需要聲音檔跟字典檔 (open_jtalk_dic_utf_8-1.09)</p>

<p>字典的部份可以在官網上下載到，至於聲音檔則是可以透過 apt-get 安裝</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install hts-voice-nitech-jp-atr503-m001</span></code></pre></td></tr></table></div></figure>


<p>最後會安裝在 /usr/share/hts-voice/ 底下</p>

<p>接下來讓我們實際使用看看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "電気をつけてみました" | open_jtalk -m /usr/share/hts-voice/nitech-jp-atr503-m001/nitech_jp_atr503_m001.htsvoice -ow output.wav -x open_jtalk_dic_utf_8-1.09</span></code></pre></td></tr></table></div></figure>


<p>上面的指令會輸出 output.wav ，用可以解碼 wav 的軟體就能夠聽到結果。</p>

<p><audio controls>
  <source src="http://kurorido.github.io/downloads/open_jtalk_sample/man.wav" type="audio/wav">
  Your browser does not support the audio tag.
</audio></p>

<p>透過這樣使用的 open_jtalk 是1.07版本，但此時最新的是 1.09，如果有需要也可以自己抓原始碼自行編譯</p>

<p>要注意的是，自行編譯的話需要也需要自行編譯 hts_engine</p>

<p>下面很簡短的說明如何編譯</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd hts_engine_API-1.10
</span><span class='line'>$ ./configure
</span><span class='line'>$ make
</span><span class='line'>$ cd ..
</span><span class='line'>$ cd open_jtalk-1.09
</span><span class='line'>$ ./configure --with-hts-engine-header-path=hts_engine_API-1.10/include --with-hts-engine-library-path=hts_engine_API-1.10/lib --with-charset=utf-8
</span><span class='line'>$ make</span></code></pre></td></tr></table></div></figure>


<p>不過身為一個宅宅工程師，當然是希望可以聽到女生的聲音</p>

<p>幸好有人製作出了這樣的聲音檔，可以在 MMDAgent 這個計畫中找到一個取名為 mei 的女性的聲音</p>

<p>這邊我們下載 MMDAgent &ldquo;Sample Script&rdquo; version 1.6 這個連結，在裡面的 VOICE/mei/ 資料夾中有著許多 htsvoice ，分別代表不同的語氣</p>

<p>這邊展示一個範例</p>

<p><audio controls>
  <source src="http://kurorido.github.io/downloads/open_jtalk_sample/mei.wav" type="audio/wav">
  Your browser does not support the audio tag.
</audio></p>

<p>實際使用過後就會覺得還是女生的聲音比較好</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Express Unless Package Must Use New RegExp()]]></title>
    <link href="http://kurorido.github.io/blog/2016/04/08/express-unless-package-must-use-new-regexp/"/>
    <updated>2016-04-08T19:03:30+08:00</updated>
    <id>http://kurorido.github.io/blog/2016/04/08/express-unless-package-must-use-new-regexp</id>
    <content type="html"><![CDATA[<p>最近使用了 express-unless 這套 package，發現 path 不管怎麼設定都不對</p>

<p>後來發現一定得用 new RegExp(); 來帶入 path，不然會沒辦法被認為是正確的</p>

<p>追到 lib/index.js 裡面的一行</p>

<figure class='code'><figcaption><span>lib/index.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">p</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">p</span> <span class="o">===</span> <span class="nx">url</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">p</span> <span class="k">instanceof</span> <span class="nb">RegExp</span> <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="nx">p</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">url</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>因為這邊 p instanceof RegExp 如果使使用一般的 string expression 就不會通過 (ex. &lsquo;/\/path/g&rsquo;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Package Study - Passport-jwt]]></title>
    <link href="http://kurorido.github.io/blog/2016/04/08/package-study-passport-jwt/"/>
    <updated>2016-04-08T17:33:28+08:00</updated>
    <id>http://kurorido.github.io/blog/2016/04/08/package-study-passport-jwt</id>
    <content type="html"><![CDATA[<p>先查看 index.js 會輸出兩個模組，</p>

<p>其中 Strategy 需要實作 passport-strategy 的 authenticate 方法</p>

<figure class='code'><figcaption><span>index.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Strategy</span><span class="o">:</span> <span class="nx">Strategy</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ExtractJwt</span> <span class="o">:</span> <span class="nx">ExtractJwt</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 authenticate 的部分</p>

<p>JwtStrategy.JwtVerifier 其實是引入 verify_jwt.js 這隻檔案的模組
事實上 verify_jwt 背後只是用 jsonwebtoken 這個 package 來做 verify 而已</p>

<figure class='code'><figcaption><span>index.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 先取出 token</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_jwtFromRequest</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 如果 token 不存在就 fail</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">self</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;No auth token&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 見 JwtStrategy.JwtVerifier = require(&#39;./verify_jwt&#39;);</span>
</span><span class='line'><span class="nx">JwtStrategy</span><span class="p">.</span><span class="nx">JwtVerifier</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_secretOrKey</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_verifOpts</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">jwt_err</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">jwt_err</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 如果 validate 不過會 fail</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">self</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="nx">jwt_err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="c1">// 剩下的就是驗證項目</span>
</span></code></pre></td></tr></table></div></figure>


<p>在實際使用的時候發現 self.fail 不會呼叫 passport verify 的 callback，需要改成 self.error</p>

<p>因此我發了一筆 issues 在 gituhb 上
<a href="https://github.com/themikenicholson/passport-jwt/issues/56">https://github.com/themikenicholson/passport-jwt/issues/56</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Set Android System Date by Adb Command?]]></title>
    <link href="http://kurorido.github.io/blog/2016/04/07/how-to-set-android-system-date-by-adb-command/"/>
    <updated>2016-04-07T14:51:32+08:00</updated>
    <id>http://kurorido.github.io/blog/2016/04/07/how-to-set-android-system-date-by-adb-command</id>
    <content type="html"><![CDATA[<p>Default SET format is &ldquo;MMDDhhmm[[CC]YY][.ss]&rdquo;, that&rsquo;s (2 digits each)
month, day, hour (0-23), and minute. Optionally century, year, and second.</p>

<h2>Example</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>date -u 040714441916.00
</span><span class='line'>
</span><span class='line'><span class="c"># Explain:</span>
</span><span class='line'><span class="c"># 04 : 四月</span>
</span><span class='line'><span class="c"># 07: 七日</span>
</span><span class='line'><span class="c"># 14: 下午兩點</span>
</span><span class='line'><span class="c"># 44: 四十四分</span>
</span><span class='line'><span class="c"># 19: 20世紀 (0-based)</span>
</span><span class='line'><span class="c"># 16: 16年</span>
</span><span class='line'><span class="c"># 00: 0 秒</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel Theme Survey - How Style and Scripts Register and Render?]]></title>
    <link href="http://kurorido.github.io/blog/2016/03/31/laravel-theme-survey-how-style-and-scripts-register-and-render/"/>
    <updated>2016-03-31T15:55:27+08:00</updated>
    <id>http://kurorido.github.io/blog/2016/03/31/laravel-theme-survey-how-style-and-scripts-register-and-render</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>最近因為要在專案動態套用不同 Theme，所以研究了一下 <a href='https://github.com/teepluss/laravel-theme' rel='nofollow' target='_blank'>Laravel Theme</a> 大致上如何運作，基本上只研究了包含 Scripts, Styles 的部分，其他 Widget, Breadcumb 則因為沒用到所以沒有研究。</p>

<!-- more -->


<h2>基本的 call flow</h2>

<ol>
<li>Theme->uses()->layout() 初始化 Theme</li>
<li>Theme->asset()->usePath()->add() 加入 Style, Scripts</li>
<li>最後在 blade 的部分透過 Theme::asset()->styles() 輸出 styles</li>
</ol>


<h2>實際看下面的 code flow</h2>

<figure class='code'><figcaption><span>加入 Styles, Scripts  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// Theme.php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">asset</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">asset</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Asset.php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__call</span><span class="p">(</span><span class="nv">$method</span><span class="p">,</span> <span class="nv">$parameters</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">call_user_func_array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="k">static</span><span class="o">::</span><span class="na">container</span><span class="p">(),</span> <span class="nv">$method</span><span class="p">),</span> <span class="nv">$parameters</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 這邊取得相對應的 AssetContainer instance</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">container</span><span class="p">(</span><span class="nv">$container</span> <span class="o">=</span> <span class="s1">&#39;default&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nb">isset</span><span class="p">(</span><span class="k">static</span><span class="o">::</span><span class="nv">$containers</span><span class="p">[</span><span class="nv">$container</span><span class="p">]))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span><span class="o">::</span><span class="nv">$containers</span><span class="p">[</span><span class="nv">$container</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AssetContainer</span><span class="p">(</span><span class="nv">$container</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">static</span><span class="o">::</span><span class="nv">$containers</span><span class="p">[</span><span class="nv">$container</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// AssetContainer.php</span>
</span><span class='line'><span class="k">protected</span> <span class="k">function</span> <span class="nf">added</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$source</span><span class="p">,</span> <span class="nv">$dependencies</span> <span class="o">=</span> <span class="k">array</span><span class="p">(),</span> <span class="nv">$attributes</span> <span class="o">=</span> <span class="k">array</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// skip... 這邊會串到 style 或是 script function 註冊 resources</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 以 script 為例</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">script</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$source</span><span class="p">,</span> <span class="nv">$dependencies</span> <span class="o">=</span> <span class="k">array</span><span class="p">(),</span> <span class="nv">$attributes</span> <span class="o">=</span> <span class="k">array</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Prepaend path to theme.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isUsePath</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$source</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">evaluatePath</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getCurrentPath</span><span class="p">()</span><span class="o">.</span><span class="nv">$source</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Reset using path.</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">usePath</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="nv">$name</span><span class="p">,</span> <span class="nv">$source</span><span class="p">,</span> <span class="nv">$dependencies</span><span class="p">,</span> <span class="nv">$attributes</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>最後來看如何輸出</h2>

<figure class='code'><figcaption><span>在 Blade 內輸出 Styles, Scripts  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// 一樣透過 Asset.php 的 magic method 操作 AssetContainer</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__call</span><span class="p">(</span><span class="nv">$method</span><span class="p">,</span> <span class="nv">$parameters</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">call_user_func_array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="k">static</span><span class="o">::</span><span class="na">container</span><span class="p">(),</span> <span class="nv">$method</span><span class="p">),</span> <span class="nv">$parameters</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// AssetContainer.php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">styles</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">group</span><span class="p">(</span><span class="s1">&#39;style&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span> <span class="k">function</span> <span class="nf">asset</span><span class="p">(</span><span class="nv">$group</span><span class="p">,</span> <span class="nv">$name</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ... skip</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">html</span><span class="p">(</span><span class="nv">$group</span><span class="p">,</span> <span class="nv">$asset</span><span class="p">[</span><span class="s1">&#39;source&#39;</span><span class="p">],</span> <span class="nv">$asset</span><span class="p">[</span><span class="s1">&#39;attributes&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack Into Summernote - Implmenet Image Alt and Title Feature]]></title>
    <link href="http://kurorido.github.io/blog/2016/03/29/hack-into-summernote-implmenet-image-alt-and-title-feature/"/>
    <updated>2016-03-29T23:03:52+08:00</updated>
    <id>http://kurorido.github.io/blog/2016/03/29/hack-into-summernote-implmenet-image-alt-and-title-feature</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p><a href='https://github.com/summernote/summernote'>Summernote</a> is an open source WYSIWYG editor like tinymce or ckeditor. I like it because it already implements almost the necessary features.  However, it lacks of function to add &lsquo;alt&rsquo; &amp; &lsquo;title&rsquo; attributes, which are important to SEO, on image elements.  This articles is to tell you how to hack into summernote and implement this feature by yourself.</p>

<!-- more -->


<h2>Prerequisite</h2>

<ul>
<li>know how to build up summernote with Grunt</li>
<li>I&rsquo;m using the version base on developer branch commit (251e68d) - after version 0.8.1</li>
</ul>


<h2>Summernote Structure Brief</h2>

<p>Almost all core source code is put under src/js directory and the core of summernote is under src/js/base directory.</p>

<h2>Steps</h2>

<p>you can see all commit change <a href='https://github.com/kurorido/summernote/commit/f8beafc227d68c8ebe9514235b43648a40383716'>here</a> and the following is the reason why change those file.</p>

<ul>
<li>Step 1 - Create our own ImagePropertiesDialog.js under bs3/module directory.</li>
<li>Step 2 - Modify bs3/settings.js to register this module.</li>
<li>Step 3 - Modify bs3/module/Button.js to give an entry point for this module.</li>
<li>Step 4 - Implement communication function between editor and dialog in base/module/Editor.js</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Have Learned From JSConf Topic What the Heck Is the Event Loop Anyway]]></title>
    <link href="http://kurorido.github.io/blog/2016/03/24/what-i-have-learned-from-jsconf-topic-what-the-heck-is-the-event-loop-anyway/"/>
    <updated>2016-03-24T17:35:42+08:00</updated>
    <id>http://kurorido.github.io/blog/2016/03/24/what-i-have-learned-from-jsconf-topic-what-the-heck-is-the-event-loop-anyway</id>
    <content type="html"><![CDATA[<p>觀看 Youtube 上 JSConf 的影片稍微整理了一下筆記</p>

<p>這個影片的內容簡單的介紹了 Javascript 運作的方法</p>

<p>但我覺得還是沒講到很深的 event loop 到底是什麼&hellip;</p>

<!-- more -->




<div class="video-container">
<iframe width="100%" height="480" src="https://www.youtube.com/embed/8aGhZQkoFbQ" frameborder="0" allowfullscreen></iframe>
</div>


<p>首先要先理解 Javascript 跑在瀏覽器上時大致分成三個層面</p>

<ul>
<li>Call Stack</li>
<li>Web Apis</li>
<li>Callback Queue</li>
</ul>


<p>Javascript 本身是 single thread 在運作的，所以所有的 Function Call 都會進入 Call Stack，當中只要有需要跑很久的 Task 在中間的話就會 Block 住下一個 Function Call</p>

<p>這時候可以透過 WebApis 的 setTimeout(cb, 0) 來將 function call 變成非同步(Async)，可以讓需要跑很久的 Task 在運作完成後推入 Callback Queue，並且在適當的時間點推回 Call Stack</p>

<p>主講人介紹了他製作的 <a href="http://latentflip.com/loupe/?" target="_blank">Call Stack 視覺化工具</a></p>

<p>實際在視覺化工具上跑下面這段 code 並且觀察 call stack 和 callback queue 的變化</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Synchronous</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Asynchronous</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">asyncForEach</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">array</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">cb</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">asyncForEach</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外值得注意的是主講人有提到 setTimeout 的 timeout 並非是保證多久之後會執行的時間&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Animation]]></title>
    <link href="http://kurorido.github.io/blog/2016/03/23/android-animation/"/>
    <updated>2016-03-23T02:30:53+08:00</updated>
    <id>http://kurorido.github.io/blog/2016/03/23/android-animation</id>
    <content type="html"><![CDATA[<p>Android 主要有兩種 Animation System，這篇文章專注在介紹較新的 Property Animation</p>

<h2>Overview</h2>

<blockquote><p>Android framework provides two animation systems: property animation (introduced in Android 3.0) and view animation.</p></blockquote>

<!-- more -->


<h2>How Property Animation Differs from View Animation</h2>

<p>首先先說明一下這兩者的差別</p>

<p>在過去 View Animation 只能夠對繼承 View 類別的物件進行屬性變化，而且還有一個致命的缺點就是 View Animation 其實只是改變 View 繪圖的座標，並非實際改變 View 類別本身，這就會發生一個 Button 被移動後，觸發 Click 事件的座標卻還留在原地的情況。</p>

<h2>Property Animation</h2>

<p>A property animation changes a property&rsquo;s (a field in an object) value over a specified length of time.</p>

<ul>
<li>Duration (屬性變化時間總長)</li>
<li>Time interpolation  (屬性變化函數)</li>
<li>Repeat count and behavior</li>
<li>Animator sets</li>
<li>Frame refresh delay</li>
</ul>


<h2>How Property Animation Works</h2>

<p>Property Animation 的運作方式就是使用 ValueAnimator 這個類別，給予物件動畫開始時和結束時的屬性值以及整個動畫經過的 Duration</p>

<p>當你呼叫 ValueAnimator.start() 就會讓動畫開始，物件的屬性會藉由內部的 Interpolator 隨著妳設定的 Duration 進行改變 (預設是線性變化)</p>

<h2>API Overview</h2>

<p>你可以在 <a target="_blank" href="http://developer.android.com/intl/zh-tw/reference/android/animation/package-summary.html">android.animation</a> 這個 package 下找到大部分的 Property Animation 的類別，不過在 Interpolator 的部分則是大多與過去的 <a target="_blank" href="http://developer.android.com/intl/zh-tw/reference/android/view/animation/package-summary.html">View Animation</a> 共用</p>

<p>在 Property Animation 中，主要的 API 有下列幾項</p>

<ul>
<li><p>Animator</p>

<ul>
<li>ValueAnimator</li>
<li>ObjectAnimator</li>
<li>AnimatorSet</li>
</ul>
</li>
<li><p>Evaluators</p></li>
<li><p>Interpolators</p></li>
</ul>


<h2>View Property &amp; Quick Example</h2>

<p>Android 當中的 View 有許多屬性可以直接進行動畫</p>

<ul>
<li>View.ALPHA</li>
<li>View.ROTATION</li>
<li>View.ROTATION_X</li>
<li>View.ROTATION_Y</li>
<li>View.SCALE_X</li>
<li>View.SCALE_Y</li>
<li>View.TRANSLATION_X</li>
<li>View.TRANSLATION_Y</li>
<li>View.TRANSLATION_Z (After API Level 21)</li>
<li>View.X</li>
<li>View.Y</li>
<li>View.Z (After API Level 21)</li>
</ul>


<p>下面是一個動畫的例子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PropertyValuesHolder</span> <span class="n">pvhX</span> <span class="o">=</span> <span class="n">PropertyValuesHolder</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">X</span><span class="o">,</span> <span class="mi">50</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'><span class="n">PropertyValuesHolder</span> <span class="n">pvhY</span> <span class="o">=</span> <span class="n">PropertyValuesHolder</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">Y</span><span class="o">,</span> <span class="mi">100</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'><span class="n">ObjectAnimator</span> <span class="n">anim</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofPropertyValuesHolder</span><span class="o">(</span><span class="n">mTextView</span><span class="o">,</span> <span class="n">pvhX</span><span class="o">,</span> <span class="n">pvhY</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">anim</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'><span class="n">anim</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多實際的例子可以參考我的 Github Repositry: <a href="https://github.com/kurorido/Android-Animation-Example">Android Animation Example</a> 快速了解每一種動畫效果</p>

<h2>Animation Listeners</h2>

<p>在 Animation 的開始、進行、結束上，可以註冊 Listener 來進行額外操作</p>

<ul>
<li>Animator.AnimatorListener

<ul>
<li>onAnimationStart() - Called when the animation starts.</li>
<li>onAnimationEnd() - Called when the animation ends.</li>
<li>onAnimationRepeat() - Called when the animation repeats itself.</li>
<li>onAnimationCancel() - Called when the animation is canceled. A cancelled animation also calls</li>
<li>onAnimationEnd(), regardless of how they were ended.</li>
</ul>
</li>
</ul>


<p>甚至是任何的 Value Update 都能夠客製化</p>

<ul>
<li>ValueAnimator.AnimatorUpdateListener

<ul>
<li>onAnimationUpdate()</li>
</ul>
</li>
</ul>


<h2>XML Directory - Animator? Animation?</h2>

<p>為了要跟 View Animation 區別，新的 Property Animation 是放在 /res/animator/ 資料夾底下，過去的 View Animation 則是放在 /res/anim 底下</p>

<p>關於如何用 XML 動畫可以參考 <a target="_blank" href="http://developer.android.com/intl/zh-tw/guide/topics/resources/animation-resource.html#Property">Android Animation Resource</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[建立自己的第一個 Github Page]]></title>
    <link href="http://kurorido.github.io/blog/2016/03/23/create-my-first-github-page/"/>
    <updated>2016-03-23T00:54:15+08:00</updated>
    <id>http://kurorido.github.io/blog/2016/03/23/create-my-first-github-page</id>
    <content type="html"><![CDATA[<p>研究了主要兩種 Solution, 第一種是 jekyll 另外一種是基於 jekyll 的框架 Octpress。</p>

<p>兩者架起來都不難，但是 jekyll 的初始版本比較陽春，octpress 則會先包好一些第三方的套件 (尤其是社交以及追蹤分析的部分)</p>

<!-- more -->


<p>octpress 比較難找到 theme 可以套，但是 jekyll 比較多，不過套別人現成 theme 也是很困難的一件事情&hellip;改用 octpress 就是因為套 theme 不順利</p>

<p>總之有一個有 code block 的 blog 而且好客製化是第一步&hellip;</p>

<p>各種 blog function 測試</p>

<hr />

<p><a href="https://www.google.com" title="Google's Homepage">I&rsquo;m an inline-style link with title</a></p>

<blockquote><p>Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.</p></blockquote>

<blockquote><p>Last night I lay in bed looking up at the stars in the sky and I thought to myself, where the heck is the ceiling.</p></blockquote>




<figure class='code'><figcaption><span> (test.js)</span> <a href='http://kurorido.github.io/downloads/code/test.js'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">sample javascript from xui</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">xui</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">window</span>     <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">string</span>     <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">document</span>   <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">simpleExpr</span> <span class="o">=</span> <span class="sr">/^#?([\w-]+)$/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">idExpr</span>     <span class="o">=</span> <span class="sr">/^#/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">tagExpr</span>    <span class="o">=</span> <span class="sr">/&lt;([\w:]+)/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">slice</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">nodeType</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span> <span class="nx">slice</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">ret</span><span class="o">=</span><span class="p">[];</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">ret</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span> <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span> <span class="p">};</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">x$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">xui</span> <span class="o">=</span> <span class="nx">xui</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">xui</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Java Code Block</li>
</ul>


<figure class='code'><figcaption><span>java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mTextView</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">target_text</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mButton</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">action_button</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mButton</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">startAnimation</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>PHP Code block</li>
</ul>


<figure class='code'><figcaption><span>php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$keywords</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="nv">$links</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$keywordLinks</span> <span class="k">as</span> <span class="nv">$keywordLink</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$keyword</span> <span class="o">=</span> <span class="nv">$keywordLink</span><span class="o">-&gt;</span><span class="na">keyword</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$link</span> <span class="o">=</span> <span class="nv">$keywordLink</span><span class="o">-&gt;</span><span class="na">link</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$target</span> <span class="o">=</span> <span class="nv">$keywordLink</span><span class="o">-&gt;</span><span class="na">target</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$keywords</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$keyword</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$links</span><span class="p">[]</span> <span class="o">=</span> <span class="nx">\Html</span><span class="o">::</span><span class="na">link</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span> <span class="nv">$keyword</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;target&#39;</span> <span class="o">=&gt;</span> <span class="nv">$target</span><span class="p">,</span> <span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;blog-keyword&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
